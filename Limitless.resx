<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="TitleLabel.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="TitleBarIcon.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="MinimizeButton.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="CloseButton.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="BackgroundPanel.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="MenuTips.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="EditorCharEffInvHelp2.ToolTip" xml:space="preserve">
    <value>Launches the "Manage Inventory" Menu

Items can be added/removed to inventory and equipped as needed here.

Quick+ in this menu will allow a "Quick Add" of a new Items.
Use the "Items"/"Handhelds"/"Wearables"/"Charms" menus in the Editor to edit afterwards.</value>
  </data>
  <data name="EditorCharEffInvHelp.ToolTip" xml:space="preserve">
    <value>What items does your character start with?

Items listed here are those in the inventory of the character.

[H] - Equipped Handheld
[W] - Equipped Wearable (Clothes, Shoes, Armor, etc.)
[C] - Equipped Charm (Bracelet, Necklace, Rings, etc.)
[U] - Identifies a Unique Item</value>
  </data>
  <data name="EditorCharEffHelp.ToolTip" xml:space="preserve">
    <value>What abilities does your character have?

This list is a combination of effects that are populated from race, class, gender, equipment, items, and custom additions.

Combinations of Effects will define the character's Status in game.  (Can be edited in "Statuses" menu in the Editor).

The populated effects cannot be removed.

Custom effects can be added or removed by the Add or Remove buttons.

Quick+ will allow a "Quick Add" of a new Effects.
Use the "Effects" menu in the Editor to edit afterwards.
</value>
  </data>
  <data name="EditorCharAblHelp.ToolTip" xml:space="preserve">
    <value>What abilities does your character have?

This list is a combination of abilities that are populated from race, class, gender, equipment, items, and custom additions.

The populated abilities cannot be removed.

Custom additions can be added or removed by the Add or Remove buttons.

Quick+ will allow a "Quick Add" of a new Ability.
Use the "Abilities" menu in the Editor to edit afterwards.</value>
  </data>
  <data name="EditorCharForceHelp2.ToolTip" xml:space="preserve">
    <value>Does your character have a special item that is a Life Force item?

Some characters may have a special unique item that is their Life Force item in addition to their Race Life Force object.

If another character possesses this item, it will allow control over this character.

The items here must be unique and one of a kind.</value>
  </data>
  <data name="EditorCharForceHelp.ToolTip" xml:space="preserve">
    <value>What is your characters source of life?

This is defined by the race of your character.

This is typically an object that if removed will either kill or allow control over a character.

Example, if a Heart is the Life Force of a character, if it is magically removed, the holder can control the character,
or "crush" the Heart to permanently kill the character.</value>
  </data>
  <data name="EditorCharLangHelp.ToolTip" xml:space="preserve">
    <value>What language(s) does your character speak?

Used for communication with other characters in the game.

If the other characters language is not one that is known to the player, the words may be scrambled when the character communicates with the player.

(This works the same way for the AI controlled characters with your character).</value>
  </data>
  <data name="EditorCharAvatarHelp.ToolTip" xml:space="preserve">
    <value>What will the main avatar be for your character?

By default, the game will look for the name of the character in .png format in the Custom Avatar directory.

If no avatar is found, it will be assigned the default "empty" avatar.  This empty avatar can be forced with the None checkbox.

Alternatively, custom avatars can be selected from the Change Avatar button.

Avatars are managed in the Options (gear icon) menu under "Manage Avatars".</value>
  </data>
  <data name="Label27.ToolTip" xml:space="preserve">
    <value>What will the main avatar be for your character?

By default, the game will look for the name of the character in .mp3 format in the Custom Music directory.

If no theme is found, it will be assigned the default battle theme.  This default can be forced with the None checkbox.

Alternatively, custom themes can be selected from the Change Theme button.

Themes are managed in the Options (gear icon) menu under "Manage Music".</value>
  </data>
  <data name="EditorCharAliasHelp.ToolTip" xml:space="preserve">
    <value>Does your character have any other identities?

Name Only No Secret - This is just a civilian identity that is known to the public
Transformation No Secret - This is just a civilian identity in a different form (race) that is known to the public.
Secret with Alternative - This is a civilian identity with public stats to hide the real identity from the public.
Secret with Transformation - This is a civilian identity in a different form (race) with public stats to hide the real identity from the public.

Race, Class, Align, Gender - For "Secret" aliases, all can be public stats (not real) to mask who the character really is.

Known - For "Secret" aliases, can add other characters that know the secret identity.

Create New - Opens Alias Editor to Create a New Alias from scratch.
Add Existing - Attach an existing Alias to this character (only one alias can be assigned to one character, but characters can have multiple aliases).
Remove Alias - Removes an assigned Alias from the character's profile.</value>
  </data>
  <data name="EditorCharVerseHelp.ToolTip" xml:space="preserve">
    <value>What part of the Multiverse is your character from?

This is used for various idenifiers throughout the game.

Quick+ will allow a "Quick Add" of a new universe.
Use the "Multiverses" menu in the Editor to edit afterwards.
</value>
  </data>
  <data name="EditorCharDestinyHelp.ToolTip" xml:space="preserve">
    <value>Primarily used for AI reasons but defines what the characters main goal in game is.

Competitive - Competes in Arenas (Default).
Passive - Non-competitive.'
Justice - Focuses on making injustices right.
Chaos - Focuses on causing as much chaos as possible.
Universe Balance - Focuses on gathering Relics to bring balance to the Universe by halving the population of all living beings.
Death - Focuses on no mercy and death to all without basis.

Quick+ will allow a "Quick Add" of a new destiny.
Use the "Destinies" menu in the Editor to edit afterwards.</value>
  </data>
  <data name="EditorCharGenderHelp.ToolTip" xml:space="preserve">
    <value>This function is usually defined for reproduction and pronoun assignment.

Male, Female, Transgender, or Ungendered

*Some races like machines or ungendered beings can have a gender assigned but may have a specific way to reproduce.</value>
  </data>
  <data name="EditorCharAlignHelp.ToolTip" xml:space="preserve">
    <value>How does your character approach decisions?

Lawful Good - Always does the right thing no matter what
Neutral Good - Does right but never takes a side
Chaotic Good - Does the right thing but at any means necessary
Lawful Neutral - Good with a dash of grey
True Neutral - In the middle
Chaotic Neutral - Chooses the dark path but does not take sides
Lawful Evil - The law but does things dark
Neutral Evil - Bad in a sense but not all the way dark
Chaotic Evil - Chaos makes this one happy</value>
  </data>
  <data name="EditorCharClassHelp.ToolTip" xml:space="preserve">
    <value>What is the job or classification of your character?

Certain classes have different effects or abilities.

Quick+ will allow a "Quick Add" of a new class.
Use the "Classes" menu in the Editor to edit afterwards.</value>
  </data>
  <data name="EditorCharTypeHelp.ToolTip" xml:space="preserve">
    <value>Prime - Original form of this character.
Generic - Designed to be a non-named character in mass volume.
Split - Created from Prime with a Split ability.  Usually half the status as Prime.
Clone - Duplicate created from a Prime.  Identical but not the original.
Variant - An alternate version of the Prime from a different timeline.
Twin - Considered Prime but born with an exact twin at birth.
Shapeshifter - Hidden stat (except if player is shifting).  Hides as Prime of a character but is actually a clone.</value>
  </data>
  <data name="EditorCharInvHelp.ToolTip" xml:space="preserve">
    <value>Add Button - Adds to Character Inventory
Add + Equip - Adds and Equips to Character
Switch Inv - 
    Cycle Between:  Master Inventory (Add New) 
    and Character Inventory (Equip/Unequip/Remove Current)</value>
  </data>
  <data name="AboutText.Text" xml:space="preserve">
    <value>This application was created by ClarkTribe Games.

It was the development of basically a one man team with the advice, suggestions, and feedback from friends, family, and colleagues.

Limitless is dedicate to the kids of the creator.

Please consider supporting the cause with a donation via the Donate To The Cause button.

The music was provided by BenSound.com.  Please visit their site for some awesome tracks!

Thank you for your continued support!

- Geoff Clark @ ClarkTribeGames</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>57</value>
  </metadata>
</root>